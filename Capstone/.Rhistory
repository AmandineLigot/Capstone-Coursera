setwd("D:/Users/apucj/Desktop/en_US")
fifth <- fread("5gram.txt", key  = "n-1")
fourth <- fread("4gram.txt", key = c("n-1","n"))
tri <- fread("trigram.txt", key = c("n-1","n"))
bi <- fread("bigram.txt", key =c("n-1","n"))
uni <- fread("unigram.txt", key = "n")
library(data.table)
library(stringr)
library(qdapRegex)
fifth <- fread("5gram.txt", key  = "n-1")
fourth <- fread("4gram.txt", key = c("n-1","n"))
tri <- fread("trigram.txt", key = c("n-1","n"))
bi <- fread("bigram.txt", key =c("n-1","n"))
uni <- fread("unigram.txt", key = "n")
sbo5 <- function(w){
w <- rm_url(w) #remove url in the sentence
w <- rm_emoticon(w) #remove emoticons
w <- rm_non_ascii(w)
w <- gsub('[[:punct:] ]+',' ',w) #remove possible punctuation
w <- tolower(w) #remove all capital letters
l <- length(strsplit(w, " ")[[1]]) #calculate the length of the given sentence
if(l >= 4){
possible5g <- fifth[word(w, -4, -1)]
tot = copy(possible5g)
tot <- na.omit(tot, cols = "frequency")
nr <- nrow(tot)
if(nr >= 3){
tot <- tot[1:3,]
#order the table and give back the first three
setorder(tot, -frequency)
c(tot$n[1],tot$n[2],tot$n[3])
}else{
c4 <- fourth[.(word(w,-4,-2), word(w, -1))]
tot <- tot[, score := frequency/c4$frequency]
tot <- tot[,c("n-1", "frequency"):= NULL]
#read the 4-grams
possible4g <- fourth[word(w,-3, -1)]
possible4g <- possible4g[!(tot$n), on = "n"]
c3 <- tri[.(word(w,-3,-2), word(w, -1))]
possible4g <- possible4g[, score := 0.4*frequency/c3$frequency]
possible4g <- possible4g[,c("n-1", "frequency"):= NULL]
tot <- rbindlist(list(tot, possible4g), use.names = TRUE)
tot <- na.omit(tot, cols = "score")
setorder(tot, -score)
nr <- nrow(tot)
if(nr >= 3){
c(tot$n[1],tot$n[2],tot$n[3])
}else {
possible3g <- tri[word(w,-2, -1)]
possible3g <- possible3g[!(tot$n), on = "n"]
c2 <- bi[.(word(w,-2), word(w, -1))]
possible3g <- possible3g[, score := 0.4*0.4*frequency/c2$frequency]
possible3g <- possible3g[,c("n-1", "frequency"):= NULL]
tot <- rbindlist(list(tot, possible3g), use.names = TRUE)
tot <- na.omit(tot, cols = "score")
setorder(tot, -score)
nr <- nrow(tot)
if(nr>=3){
c(tot$n[1],tot$n[2],tot$n[3])
}else{
possible2g <- bi[word(w,-1)]
possible2g <- possible2g[!(tot$n), on = "n"]
c1 <- uni[ word(w, -1)]
possible2g <- possible2g[, score := 0.4*0.4*0.4*frequency/c1$frequency]
possible2g <- possible2g[,c("n-1", "frequency"):= NULL]
tot <- rbindlist(list(tot, possible2g), use.names = TRUE)
tot <- na.omit(tot, cols = "score")
setorder(tot, -score)
c(tot$n[1],tot$n[2],tot$n[3])
}
}
}
}else if(l==3){
possible4g <- fourth[word(w,-3, -1)]
tot = copy(possible4g)
tot <- na.omit(tot, cols = "frequency")
nr <- nrow(tot)
if(nr >=3){
setorder(tot, -frequency())
c(tot$n[1],tot$n[2],tot$n[3])
}else{
c3 <- tri[.(word(w,-3,-2), word(w, -1))]
tot <- tot[, score := frequency/c3$frequency]
tot <- tot[,c("n-1", "frequency"):= NULL]
possible3g <- tri[word(w,-2, -1)]
possible3g <- possible3g[!(tot$n), on = "n"]
c2 <- bi[.(word(w,-2), word(w, -1))]
possible3g <- possible3g[, score := 0.4*frequency/c2$frequency]
possible3g <- possible3g[,c("n-1", "frequency"):= NULL]
tot <- rbindlist(list(tot, possible3g), use.names = TRUE)
tot <- na.omit(tot, cols = "score")
setorder(tot, -score)
nr <- nrow(tot)
if(nr>=3){
c(tot$n[1],tot$n[2],tot$n[3])
}else{
possible2g <- bi[word(w,-1)]
possible2g <- possible2g[!(tot$n), on = "n"]
c1 <- uni[ word(w, -1)]
possible2g <- possible2g[, score := 0.4*0.4*frequency/c1$frequency]
possible2g <- possible2g[,c("n-1", "frequency"):= NULL]
tot <- rbindlist(list(tot, possible2g), use.names = TRUE)
tot <- na.omit(tot, cols = "score")
setorder(tot, -score)
c(tot$n[1],tot$n[2],tot$n[3])
}
}
}else if(l ==2){
possible3g <- tri[word(w,-2, -1)]
tot = copy(possible3g)
tot <- na.omit(tot, cols = "frequency")
nr <- nrow(tot)
if(nr>=3){
setorder(tot, -frequency())
c(tot$n[1],tot$n[2],tot$n[3])
}else{
c2 <- bi[.(word(w,-2), word(w, -1))]
tot <- tot[, score := frequency/c2$frequency]
tot <- tot[,c("n-1", "frequency"):= NULL]
possible2g <- bi[word(w,-1)]
possible2g <- possible2g[!(tot$n), on = "n"]
c1 <- uni[ word(w, -1)]
possible2g <- possible2g[, score := 0.4*frequency/c1$frequency]
possible2g <- possible2g[,c("n-1", "frequency"):= NULL]
tot <- rbindlist(list(tot, possible2g), use.names = TRUE)
tot <- na.omit(tot, cols = "score")
setorder(tot, -score)
c(tot$n[1],tot$n[2],tot$n[3])
}
}else{
possible2g <- bi[word(w,-1)]
tot = copy(possible2g)
tot <- na.omit(tot, cols = "frequency")
nr <- nrow(tot)
if(nr>=3){
setorder(tot, -frequency())
c(tot$n[1],tot$n[2],tot$n[3])
}else{
c1 <- uni[ word(w, -1)]
tot <- tot[, score := frequency/c1$frequency]
tot <- tot[,c("n-1", "frequency"):= NULL]
possible1g = copy(uni)
setorder(possible1g,-frequency)
possible1g <- possible1g[1:5,] #will take max 5 from unigrams
possible1g <- possible1g[, score := frequency/sum(uni$frequency)]
possible1g <- possible1g[ ,frequency := NULL]
tot <- rbindlist(list(tot, possible1g), use.names = TRUE)
tot <- na.omit(tot, cols = "score")
setorder(tot, -score)
c(tot$n[1],tot$n[2],tot$n[3])
}
}
}
sbo5("I like")
sbo5("the cat and the dog")
require(digest)
require(stringi)
require(data.table)
################################################################################################
#
# 01. Loading of benchmark data sets
#
################################################################################################
# 01b. Get text from randomly selected tweets
################################################################################################
tweets <- readLines('data/tweets.txt', encoding = 'UTF-8')
# verify checksum of loaded lines
digest(paste0(tweets, collapse = '||'),
algo='sha256',
serialize=F)==
"7fa3bf921c393fe7009bc60971b2bb8396414e7602bb4f409bed78c7192c30f4"
# 01c. Get text from randomly selected blog descriptions
################################################################################################
# make sure we can read it back in
blogs <- readLines('data/blogs.txt', encoding = 'UTF-8')
# verify checksum of loaded lines
digest(paste0(blogs, collapse = '||'),
algo='sha256',
serialize=F)==
"14b3c593e543eb8b2932cf00b646ed653e336897a03c82098b725e6e1f9b7aa2"
################################################################################################
#
# 02. Define the functions used for benchmarking
#
################################################################################################
# 02a. Pre-processing functions
################################################################################################
# split.sentence
#  Returns a matrix containing in column i the part of the line before the ith word (sentence)
#  and the ith word (nextWord).
#  The function is used in benchmark to generate and evaluate predictions for the partial lines.
split.sentence <- compiler::cmpfun(function(line) {
require(stringi)
# append a space to the sentence (to make sure we always create one result with only the
# last word missing)
sent <- paste0(line, ' ')
sep <- stri_locate_all_regex(line,
pattern = '[^\\w\'@#\u2018\u2019\u201b]+',
omit_empty=T,
case_insensitive=T)[[1]]
sapply(seq_len(nrow(sep)),
function(i) {
c(sentence=ifelse(i>1, substr(line, 1, sep[i-1,2]), ''),
nextWord=tolower(substr(line, max(sep[i-1,2]+1, 1), min(nchar(line), sep[i,1]-1)))
)
})
}, options=list(optimize=3))
# 02b. Benchmarking function
################################################################################################
# benchmark
#  Evaluates the performance of a next word prediction algorithm based on the provided test data-
#  set(s).
#
#  Parameters
#   FUN         Function that produces the next word prediction. The function should take a single
#               character value as first input and return a vector of character values represen-
#               ting the top-3 predictions (with the 1st value being the first prediction).
#   ...         Additional parameters to pass to FUN.
#   sent.list   Named list of character vectors containing the text lines used for the benchmark.
#   ext.output  If TRUE, return additional details about the R environment and loaded packages
#               after completing the benchmark.
benchmark <- compiler::cmpfun(function(FUN, ..., sent.list, ext.output=T) {
require(stringi)
require(digest)
require(data.table)
result <- rbindlist(lapply(names(sent.list),
function(list.name) {
sentences <- sent.list[[list.name]]
score <- 0
max.score <-0
hit.count.top3 <- 0
hit.count.top1 <- 0
total.count <- 0
time <- system.time({
for (sent in sentences) {
split <- split.sentence(sent[1])
max.score <- max.score + ncol(split)*3
total.count <- total.count + ncol(split)
rank <- sapply(seq_len(ncol(split)),
function(i) {
min(which(FUN(split[1,i], ...)==split[2,i]),4)
})
score <- score + sum(4-rank)
hit.count.top3 <- hit.count.top3 + sum(rank<4)
hit.count.top1 <- hit.count.top1 + sum(rank==1)
}
})
list('list.name' = list.name,
'line.count' = length(sentences),
'word.count' = sum(stri_count_words(sentences)),
'hash' = digest(paste0(sentences, collapse = '||'), algo='sha256', serialize=F),
'score' = score,
'max.score' = max.score,
'hit.count.top3' = hit.count.top3,
'hit.count.top1' = hit.count.top1,
'total.count' = total.count,
'total.runtime' = time[3]
)
}), use.names=T)
setkey(result, list.name)
# The overall scores are calculated weighting each data set equally (independent of the
# number of lines in each dataset).
overall.score.percent = 100 * result[,sum(score/max.score)/.N]
overall.precision.top3 = 100 * result[,sum(hit.count.top3/total.count)/.N]
overall.precision.top1 = 100 * result[,sum(hit.count.top1/total.count)/.N]
average.runtime = 1000 * result[,sum(total.runtime)/sum(total.count)]
number.of.predictions = result[,sum(total.count)]
total.mem.used = sum(unlist(lapply(ls(.GlobalEnv),
function(x) {
object.size(get(x,
envir = .GlobalEnv,
inherits = FALSE))
})))/(1024^2)
cat(sprintf(paste0('Overall top-3 score:     %.2f %%\n',
'Overall top-1 precision: %.2f %%\n',
'Overall top-3 precision: %.2f %%\n',
'Average runtime:         %.2f msec\n',
'Number of predictions:   %d\n',
'Total memory used:       %.2f MB\n'),
overall.score.percent,
overall.precision.top1,
overall.precision.top3,
average.runtime,
number.of.predictions,
total.mem.used
))
cat('\nDataset details\n')
for (p.list.name in result$list.name) {
res <- result[list(p.list.name)]
cat(sprintf(paste0(' Dataset "%s" (%d lines, %d words, hash %s)\n',
'  Score: %.2f %%, Top-1 precision: %.2f %%, Top-3 precision: %.2f %%\n'
),
p.list.name,
res$line.count,
res$word.count,
res$hash,
100 * res$score/res$max.score,
100 * res$hit.count.top1/res$total.count,
100 * res$hit.count.top3/res$total.count
))
}
if (ext.output==T) {
packages <- sort(stri_replace_first_fixed(search()[stri_detect_regex(search(),
'^package:')],
'package:', ''))
cat(sprintf(paste0('\n\n%s, platform %s\n',
'Attached non-base packages:   %s\n',
'Unattached non-base packages: %s'
),
sessionInfo()$R.version$version.string,
sessionInfo()$platform,
paste0(sapply(sessionInfo()$otherPkgs,
function(pkg) {
paste0(pkg$Package, ' (v', pkg$Version, ')')
}),
collapse = ', '),
paste0(sapply(sessionInfo()$loadedOnly,
function(pkg) {
paste0(pkg$Package, ' (v', pkg$Version, ')')
}),
collapse = ', ')
))
}
}, options=list(optimize =3))
benchmark(sbo5,
# additional parameters to be passed to the prediction function can be inserted here
sent.list = list('tweets' = tweets,
'blogs' = blogs),
ext.output = T)
setwd("D:/Users/apucj/Desktop/en_US/Capstone_Coursera/Capstone")
setwd("D:/Users/apucj/Desktop/en_US")
sbo5 <- function(w){
w <- rm_url(w) #remove url in the sentence
w <- rm_emoticon(w) #remove emoticons
w <- rm_non_ascii(w)
w <- gsub('[[:punct:] ]+',' ',w) #remove possible punctuation
w <- tolower(w) #remove all capital letters
l <- length(strsplit(w, " ")[[1]]) #calculate the length of the given sentence
if(l >= 4){
possible5g <- fifth[word(w, -4, -1)]
tot = copy(possible5g)
tot <- na.omit(tot, cols = "frequency")
nr <- nrow(tot)
if(nr >= 5){
#order the table and give back the first three
setorder(tot, -frequency)
c(tot$n[1],tot$n[2],tot$n[3])
}else{
c4 <- fourth[.(word(w,-4,-2), word(w, -1))]
tot <- tot[, score := frequency/c4$frequency]
tot <- tot[,c("n-1", "frequency"):= NULL]
#read the 4-grams
possible4g <- fourth[word(w,-3, -1)]
possible4g <- possible4g[!(tot$n), on = "n"]
c3 <- tri[.(word(w,-3,-2), word(w, -1))]
possible4g <- possible4g[, score := 0.4*frequency/c3$frequency]
possible4g <- possible4g[,c("n-1", "frequency"):= NULL]
tot <- rbindlist(list(tot, possible4g), use.names = TRUE)
tot <- na.omit(tot, cols = "score")
setorder(tot, -score)
nr <- nrow(tot)
if(nr >= 5){
c(tot$n[1],tot$n[2],tot$n[3])
}else {
possible3g <- tri[word(w,-2, -1)]
possible3g <- possible3g[!(tot$n), on = "n"]
c2 <- bi[.(word(w,-2), word(w, -1))]
possible3g <- possible3g[, score := 0.4*0.4*frequency/c2$frequency]
possible3g <- possible3g[,c("n-1", "frequency"):= NULL]
tot <- rbindlist(list(tot, possible3g), use.names = TRUE)
tot <- na.omit(tot, cols = "score")
setorder(tot, -score)
nr <- nrow(tot)
if(nr>=5){
c(tot$n[1],tot$n[2],tot$n[3])
}else{
possible2g <- bi[word(w,-1)]
possible2g <- possible2g[!(tot$n), on = "n"]
c1 <- uni[ word(w, -1)]
possible2g <- possible2g[, score := 0.4*0.4*0.4*frequency/c1$frequency]
possible2g <- possible2g[,c("n-1", "frequency"):= NULL]
tot <- rbindlist(list(tot, possible2g), use.names = TRUE)
tot <- na.omit(tot, cols = "score")
setorder(tot, -score)
c(tot$n[1],tot$n[2],tot$n[3])
}
}
}
}else if(l==3){
possible4g <- fourth[word(w,-3, -1)]
tot = copy(possible4g)
tot <- na.omit(tot, cols = "frequency")
nr <- nrow(tot)
if(nr >=5){
setorder(tot, -frequency())
c(tot$n[1],tot$n[2],tot$n[3])
}else{
c3 <- tri[.(word(w,-3,-2), word(w, -1))]
tot <- tot[, score := frequency/c3$frequency]
tot <- tot[,c("n-1", "frequency"):= NULL]
possible3g <- tri[word(w,-2, -1)]
possible3g <- possible3g[!(tot$n), on = "n"]
c2 <- bi[.(word(w,-2), word(w, -1))]
possible3g <- possible3g[, score := 0.4*frequency/c2$frequency]
possible3g <- possible3g[,c("n-1", "frequency"):= NULL]
tot <- rbindlist(list(tot, possible3g), use.names = TRUE)
tot <- na.omit(tot, cols = "score")
setorder(tot, -score)
nr <- nrow(tot)
if(nr>=5){
c(tot$n[1],tot$n[2],tot$n[3])
}else{
possible2g <- bi[word(w,-1)]
possible2g <- possible2g[!(tot$n), on = "n"]
c1 <- uni[ word(w, -1)]
possible2g <- possible2g[, score := 0.4*0.4*frequency/c1$frequency]
possible2g <- possible2g[,c("n-1", "frequency"):= NULL]
tot <- rbindlist(list(tot, possible2g), use.names = TRUE)
tot <- na.omit(tot, cols = "score")
setorder(tot, -score)
c(tot$n[1],tot$n[2],tot$n[3])
}
}
}else if(l ==2){
possible3g <- tri[word(w,-2, -1)]
tot = copy(possible3g)
tot <- na.omit(tot, cols = "frequency")
nr <- nrow(tot)
if(nr>=5){
setorder(tot, -frequency())
c(tot$n[1],tot$n[2],tot$n[3])
}else{
c2 <- bi[.(word(w,-2), word(w, -1))]
tot <- tot[, score := frequency/c2$frequency]
tot <- tot[,c("n-1", "frequency"):= NULL]
possible2g <- bi[word(w,-1)]
possible2g <- possible2g[!(tot$n), on = "n"]
c1 <- uni[ word(w, -1)]
possible2g <- possible2g[, score := 0.4*frequency/c1$frequency]
possible2g <- possible2g[,c("n-1", "frequency"):= NULL]
tot <- rbindlist(list(tot, possible2g), use.names = TRUE)
tot <- na.omit(tot, cols = "score")
setorder(tot, -score)
c(tot$n[1],tot$n[2],tot$n[3])
}
}else{
possible2g <- bi[word(w,-1)]
tot = copy(possible2g)
tot <- na.omit(tot, cols = "frequency")
nr <- nrow(tot)
if(nr>=5){
setorder(tot, -frequency())
c(tot$n[1],tot$n[2],tot$n[3])
}else{
c1 <- uni[ word(w, -1)]
tot <- tot[, score := frequency/c1$frequency]
tot <- tot[,c("n-1", "frequency"):= NULL]
possible1g = copy(uni)
setorder(possible1g,-frequency)
possible1g <- possible1g[1:5,] #will take max 5 from unigrams
possible1g <- possible1g[, score := frequency/sum(uni$frequency)]
possible1g <- possible1g[ ,frequency := NULL]
tot <- rbindlist(list(tot, possible1g), use.names = TRUE)
tot <- na.omit(tot, cols = "score")
setorder(tot, -score)
c(tot$n[1],tot$n[2],tot$n[3])
}
}
}
benchmark(sbo5,
# additional parameters to be passed to the prediction function can be inserted here
sent.list = list('tweets' = tweets,
'blogs' = blogs),
ext.output = T)
setwd("D:/Users/apucj/Desktop/en_US/Capstone_Coursera/Capstone")
shiny::runApp()
profvis::profvis(runApp())
